//Database spec

authors
  └── AUTHOR_ID
        ├── FIRST_NAME: string
        ├── LAST_NAME: string
        ├── EMAIL: string
        ├── BIO: string
        ├── LOCATION: string
        ├── BOOKS_AS_AUTHOR: [string] (array of book IDs) //Owns these and has edit permissions aka is the author to these book IDs
        ├── FAVORITED_BOOKS: [string] (array of book IDs) //The ones the profile has clicked favorite on
        ├── FOLLOWING: [string] (array of userIDs/genres) //list of genres/userIDs followed
        ├── PROFILE_PIC_URL: string (URL of the profile image)

books
  └── BOOK_ID
        ├── BOOK_TITLE: string
        ├── IS_PUBLISHED: bool
        ├── AUTHOR: string
        ├── AUTHOR_ID: string
        ├── GENRE_TAGS: [string] (array of genre tags)
        |── NUM_CHAPTERS: int
        ├── NUM_DRAFTS: int
        |── DATE: time
        ├── COVER_IMAGE_URL: string (URL of the book cover)
        |── SYNOPSIS: string
        ├── CHAPTERS: 
        │     └── CHAPTER_ID:
        |         ├── IS_PUBLISHED : bool
        │         ├── TITLE: string
        |         ├── CHAPTER_NUM: int
        │         ├── TEXT: string
        |         ├── COMMENTS:
        |               └── COMMENT_ID:
        |                   ├── COMMENTOR_ID : string
        |                   ├── COMMENTOR_NAME : string
        |                   ├── RATING : int
        |                   ├── TEXT: string



//-------------------------------------Unprotected Endpoints-----------------------------------

GET /authors/:authorId
Get author profile (ID, First name, BIO, Location, Books as Author, Following, Profile Pic URL)
Example/format:
{
  "id": "43252",
  "first_name": "John",
  "bio": "John's Bio",
  "location": "California",
  "books_as_author": ["64353", "845"],
  "following": ["5434", "345"],
  "profile_pic_url": "exampleurl"
}




GET /books/:bookId
Get information about a book IF PUBLISHED (ID, title, author, author_id, genre tags, number of chapters, date, cover image url)
Example/format:
{
  "id": "2432",
  "title": "johns book",
  "author": "John Smith",
  "author_id": "43242",
  "genre_tags": ["horror", "action"],
  "num_chapters": 10,
  "date": "datetime,
  "cover_image_url": "coverurl"
}




GET /books/:bookId/:chapterNum
Gets a non-draft chapter from a PUBLISHED book
Example/format:
{
  "parent_book_id": "2432",
  "chapter_num" : 1
  "chapter_title": "The start",
  "text": "hello, this is chapter one blah blah blah.",
}




GET /books?count={x}
Gets x number of PUBLISHED book's information.
Example/format if x = 2:
{
  "books": [
              {
                  "id": "2432",
                  "title": "johns book",
                  "author": "John Smith",
                  "author_id": "43242",
                  "genre_tags": ["horror", "action"],
                  "num_chapters": 10,
                  "date": "datetime,
                  "cover_image_url": "coverurl"
            },
            {
                  "id": "53453",
                  "title": "david's book",
                  "author": "David",
                  "author_id": "242",
                  "genre_tags": ["action"],
                  "num_chapters": 4,
                  "date": "datetime,
                  "cover_image_url": "coverurl"
          }
          ]
}




GET /authors/:authorId/books
Gets all the PUBLISHED book's info associated with the authorID
Example/format if x = 2:
{
  "books": [
              {
                  "id": "2432",
                  "title": "johns book",
                  "author": "John Smith",
                  "author_id": "43242",
                  "genre_tags": ["horror", "action"],
                  "num_chapters": 10,
                  "date": "datetime,
                  "cover_image_url": "coverurl"
            },
            {
                  "id": "534453",
                  "title": "johns second book",
                  "author": "John Smith",
                  "author_id": "43242",
                  "genre_tags": ["action"],
                  "num_chapters": 5,
                  "date": "datetime,
                  "cover_image_url": "coverurl"
          }
          ]
}


//-------------------------------------Protected Endpoints-------------------------------------
Must include header:
Authorization: Bearer <Firebase_ID_Token>

POST /authors
Makes a new author
Example/format:
{
  "first_name": "John",
  "last_name": "Smith",
  "email": "jsmith@email.email",
  "location": "California",
}




PATCH /authors/:authorId
Update the author's information. Only includes fields that were updated.
Example/format:
{
  "bio": "new bio",
  "location": "new location",
  "profile_pic_url": "newurl"
}




POST /books
Makes a new book with the given author info, tags, etc
Example/format:
{
  "title": "newBook",
  "author_id": "43543",
  "genre_tags": ["action"],
  "cover_image_url": "coverurl"
}




POST /books/:bookId/newChapter
Makes a new chapter in the given book with the given title.
Example/format:
{
  "chapter_title": "Next chapter",
}




PATCH /books/:bookId/:chapterNum
Modifys the chapter with new text.
Example/format:
{
  "chapter_title": "The start",
  "text": "new content",
}

